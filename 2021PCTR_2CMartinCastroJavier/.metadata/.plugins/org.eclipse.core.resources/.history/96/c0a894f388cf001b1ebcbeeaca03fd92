package main.java.pctr2c;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Juego implements IJuego {

	private int contadorEnemigosTotales;
	private Hashtable<Integer, Integer> contadoresEnemigosTipos;
	private Hashtable<Integer, Integer> contadoresEliminadosTipos;
	private final int MINENEMIGOS = 0;
	private final int MAXENEMIGOS = 0;
	private static final int LLENO = 0, PARCIAL = 1, VACIO = 2;
	private int estado;

	@Override
	public void generarEnemigo(int numero) {
		comprobarAntesDeGenerar();

		// Si no existe valor en el contador lo inicializamos
		inicializarContadores(numero, contadoresEnemigosTipos);

		contadorEnemigosTotales++;
		contadoresEnemigosTipos.put(numero, contadoresEnemigosTipos.get(numero) + 1);

		checkInvariante();

		// Imprimimos el estado del enemigo
		imprimirInfo(numero, "Generado");
	}

	@Override
	public void eliminarEnemigo(int numero) {
		comprobarAntesDeEliminar();

		// Si no existe valor en el contador lo inicializamos
		inicializarContadores(numero, contadoresEliminadosTipos);

		contadorEnemigosTotales--;
		contadoresEliminadosTipos.put(numero, contadoresEliminadosTipos.get(numero) + 1);

		checkInvariante();

		// Imprimimos el estado del enemigo
		imprimirInfo(numero, "Eliminado");
	}

	private void inicializarContadores(int numero, Hashtable<Integer, Integer> contadores) {
		// inicializamos
		if (contadores.get(numero) == null) {
			contadores.put(numero, MINENEMIGOS);
		}
	}

	private void imprimirInfo(int numero, String movimiento) {
		System.out.println(movimiento + " tipo " + numero);
		System.out.println("--> Enemigos totales " + contadorEnemigosTotales);

		Integer contIN, contOUT;

		// Iteramos todos los enemigos e imprimimos por pantalla
		for (Integer num : contadoresEnemigosTipos.keySet()) {
			contIN = contadoresEnemigosTipos.get(num);
			if (contIN == null) {
				contIN = 0;
			}
			contOUT = contadoresEliminadosTipos.get(num);
			if (contOUT == null) {
				contOUT = 0;
			}
			System.out
					.println("-----> Enemigos tipo " + num + ": " + contIN + " ------- [Eliminados: " + contOUT + "]");
		}
		System.out.println(" ");
	}

	public int sumarContadores() {
		int sumaContadoresEnemigos = 0;

		Enumeration<Integer> iterPuertas = contadoresEnemigosTipos.elements();
		while (iterPuertas.hasMoreElements()) {
			sumaContadoresEnemigos += iterPuertas.nextElement();
		}
		return sumaContadoresEnemigos;
	}

	// Los contadores de enemigos vivos deben sumar lo mismo que el contador total
	// de enemigos
	protected void checkInvariante() {
		int sumarContadores = sumarContadores();
		assert sumarContadores == contadorEnemigosTotales : "INV: Los contadores de enemigos vivos deben sumar lo mismo que el contador total de enemigos";
	}

	protected void comprobarAntesDeGenerar() {
		checkInvariante();
		while (contadorEnemigosTotales == MAXENEMIGOS) {
			try {
				wait();
			} catch (InterruptedException e) {
				Logger.getGlobal().log(Level.WARNING,
						"Operación interrumpida, seguimos esperando. Enemigos: " + contadorEnemigosTotales);
			}
		}
		
		notifyAll();
	}

	protected void comprobarAntesDeEliminar() {
		checkInvariante();
		while (contadorEnemigosTotales == MINENEMIGOS) {
			try {
				wait();
			} catch (InterruptedException e) {
				Logger.getGlobal().log(Level.WARNING,
						"Operación interrumpida, seguimos esperando. Enemigos: " + contadorEnemigosTotales);
			}
		}
	}

}
